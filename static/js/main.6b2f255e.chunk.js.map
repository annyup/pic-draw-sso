{"version":3,"sources":["components/ClearButton.js","components/ColorButton.js","components/EraserButton.js","components/PostButton.js","components/GalleryButton.js","components/SliderButton.js","components/Buttons.js","firebase.js","components/Canvas.js","components/Gallery.js","App.js","serviceWorker.js","index.js"],"names":["ClearButton","props","className","onClick","class","ColorButton","getColor","e","color","currentTarget","value","this","htmlFor","name","id","type","onChange","Component","EraserButton","getEraser","PostButton","saveCanvas","GalleryButton","to","SliderButton","setSize","size","target","setState","state","min","max","Buttons","colorFunction","brushFunction","eraserFunction","clearFunction","postFunction","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Canvas","startDrawing","nativeEvent","isDrawing","handleDraw","x","y","currentPos","canvas","current","getBoundingClientRect","offsetX","left","offsetY","top","ctx","lineJoin","lineCap","clientX","clientY","touch","changedTouches","lineTo","stroke","beginPath","moveTo","stopDrawing","closePath","brushSize","lineWidth","changeColor","selectedColor","globalCompositeOperation","strokeStyle","useEraser","clearCanvas","clearRect","width","height","dataURL","toDataURL","blank","swal","text","database","ref","push","updateResize","window","innerWidth","updateWidth","updateHeight","Math","round","React","createRef","getContext","addEventListener","bind","onMouseDown","onMouseUp","onMouseOut","onMouseMove","onTouchStart","onTouchMove","onTouchEnd","Gallery","drawingsArray","isLoading","on","response","dataFromDb","val","arrayFromDb","key","drawingUrl","map","item","src","alt","App","exact","path","component","href","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6b2f255e.chunk.js","sourcesContent":["// ClearButton.js\r\n\r\nimport React from \"react\";\r\n\r\nconst ClearButton = (props) => {\r\n    return (\r\n      <button className=\"button-style\" onClick={props.onClick}>\r\n        Clear\r\n        <i class=\"far fa-trash-alt\"></i>\r\n      </button>\r\n    );\r\n};\r\n\r\nexport default ClearButton;","// ColorButton.js\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nclass ColorButton extends Component {\r\n  // gets the hexcolor chosen by user\r\n  getColor = (e) => {\r\n    const color = e.currentTarget.value;\r\n\r\n    this.props.onClick(color);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <button className=\"button-style\" onClick={this.props.onClick}>\r\n          <label htmlFor=\"choose-color\">\r\n          Color\r\n          </label>\r\n          <input\r\n            className=\"choose-color\"\r\n            name=\"choose-color\"\r\n            id=\"choose-color\"\r\n            type=\"color\"\r\n            onChange={this.getColor}\r\n            />\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ColorButton;","// EraserButton.js\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nclass EraserButton extends Component {\r\n\r\n      getEraser = () => {\r\n        const eraser = \"#FFFFFF\";\r\n        this.props.onClick(eraser);\r\n      };\r\n\r\n    render() {\r\n        return (\r\n            <button className=\"button-style\" onClick={this.getEraser}>\r\n            Eraser\r\n            <i class=\"fas fa-eraser\"></i>\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EraserButton;","// PostButton.js\r\n\r\nimport React, { Component } from 'react';\r\n\r\nclass PostButton extends Component {\r\n\r\n    saveCanvas = () => {\r\n        this.props.onClick();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button className=\"button-style\" onClick={this.saveCanvas}>\r\n            Save\r\n            <i class=\"far fa-save\"></i>\r\n            </button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PostButton;","// GalleryButton.js\r\n\r\nimport React, { Component } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass GalleryButton extends Component {\r\n\r\n    render() {\r\n        return (         \r\n\r\n        <Link to=\"/gallery\">\r\n            <button className=\"button-style\">\r\n            Gallery\r\n            <i class=\"far fa-image\"></i>\r\n            </button>\r\n        </Link>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GalleryButton;","// SliderButton.js\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nclass SliderButton extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            value: 1,\r\n        };\r\n    }\r\n\r\n    // changes slider position and value\r\n    setSize = (e) => {\r\n        const size = e.target.value;\r\n        this.setState({value: size});\r\n\r\n        // calls canvas brushSize to change brush size\r\n        this.props.onChange (size);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button className=\"button-style\">\r\n                <input\r\n                    className=\"brush-slider\"\r\n                    type = \"range\"\r\n                    min = \"1\"\r\n                    max = \"50\"\r\n                    id = \"brush-slider\"\r\n                    value = {this.state.value}\r\n                    onChange = {this.setSize}/>\r\n                <span class=\"sr-only\">Slider</span>\r\n            </button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SliderButton;","// Button.js\r\n\r\nimport React from 'react';\r\nimport ClearButton from './ClearButton.js';\r\nimport ColorButton from './ColorButton.js';\r\nimport EraserButton from './EraserButton.js';\r\nimport PostButton from './PostButton.js';\r\nimport GalleryButton from './GalleryButton.js';\r\nimport SliderButton from './SliderButton.js';\r\n\r\n\r\nconst Buttons = (props) => {\r\n    return (\r\n        <div className=\"button-container\">\r\n            <span className=\"palette-icon\">&#x1F3A8;</span>\r\n            <span class=\"sr-only\">palette</span>\r\n            <ColorButton onClick={props.colorFunction}/>\r\n            <SliderButton onChange={props.brushFunction}/>\r\n            <EraserButton onClick={props.eraserFunction}/>\r\n            <ClearButton onClick={props.clearFunction}/>\r\n            <PostButton onClick={props.postFunction}/>\r\n            <GalleryButton/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Buttons;","// firebase.js\r\n\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDEO2ba1uqXgGgxGfGyprWJ-WYnj3stdnA\",\r\n    authDomain: \"anny-pham-project-five.firebaseapp.com\",\r\n    databaseURL: \"https://anny-pham-project-five.firebaseio.com\",\r\n    projectId: \"anny-pham-project-five\",\r\n    storageBucket: \"anny-pham-project-five.appspot.com\",\r\n    messagingSenderId: \"968522599205\",\r\n    appId: \"1:968522599205:web:2703cb30469cf9be3ba8cc\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n","import React, { Component } from \"react\";\r\nimport Buttons from './Buttons.js';\r\nimport firebase from \"../firebase.js\";\r\nimport swal from 'sweetalert';\r\n\r\n// naming, file structure and code help from Anna Liang\r\n// https://github.com/annajliang/drawIt/blob/master/src/components/Canvas.js\r\nclass Canvas extends Component {\r\n    constructor() {\r\n        super();\r\n        // if user is not drawing, it is set to false\r\n        this.isDrawing = false;\r\n        // canvas is referenced in the render html\r\n        this.canvas = React.createRef();\r\n\r\n        this.blank = null;\r\n\r\n        // default width and height\r\n        this.state = {\r\n            width: 800,\r\n            height: 600,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.ctx = this.canvas.current.getContext(\"2d\");\r\n        this.blank = this.canvas.current.toDataURL();\r\n        this.updateResize();\r\n        window.addEventListener(\"resize\", this.updateResize.bind(this));\r\n    }\r\n\r\n    // when user starts start drawing\r\n    startDrawing = ({nativeEvent}) => {\r\n        this.isDrawing = true;\r\n        this.handleDraw({nativeEvent})\r\n\r\n        // for tablet & mobile users\r\n        if (nativeEvent.type === \"touchstart\") {\r\n            this.isDrawing = true;\r\n        }\r\n    }\r\n\r\n    // handles the drawing\r\n    // help from https://stackoverflow.com/questions/11287877/how-can-i-get-e-offsetx-on-mobile-ipad\r\n    // https://stackoverflow.com/questions/49157880/how-to-handle-touch-events-with-html5-canvas\r\n    // https://stackoverflow.com/questions/17130395/real-mouse-position-in-canvas\r\n    handleDraw = ({nativeEvent}) => {\r\n\r\n        const currentPos = this.canvas.current.getBoundingClientRect();\r\n        let offsetX = currentPos.left;\r\n        let offsetY = currentPos.top;\r\n\r\n        // shape of the stroke\r\n        this.ctx.lineJoin = \"round\";\r\n        this.ctx.lineCap = \"round\";\r\n\r\n        let x;\r\n        let y;\r\n\r\n        // checks if user is drawing with mouse or touchscreen\r\n        if(this.isDrawing) {\r\n            if (nativeEvent.type === \"mousemove\") {\r\n                x = nativeEvent.clientX - offsetX;\r\n                y = nativeEvent.clientY - offsetY;\r\n                \r\n            // for tablet & mobile users\r\n            } else if (nativeEvent.type === \"touchmove\") {\r\n                const touch = nativeEvent.changedTouches[0];\r\n                x = touch.clientX - offsetX;\r\n                y = touch.clientY - offsetY;\r\n            }\r\n\r\n            this.ctx.lineTo(x, y);\r\n            this.ctx.stroke();\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x, y);\r\n        }\r\n    }\r\n\r\n    // when user stops drawing\r\n    stopDrawing = ({nativeEvent}) => {\r\n        this.isDrawing = false;\r\n        this.ctx.beginPath();\r\n        this.ctx.closePath();\r\n        // for tablet & mobile users\r\n        if (nativeEvent.type === \"touchend\") {\r\n            this.isDrawing = false;\r\n            this.ctx.beginPath();\r\n        }\r\n    }\r\n\r\n    // slider function for brush size\r\n    brushSize = (size) => {\r\n        this.ctx.lineWidth = size;\r\n    }\r\n\r\n    // changes color of the brush\r\n    changeColor = (selectedColor) => {\r\n        this.ctx.globalCompositeOperation = \"source-over\";\r\n        this.ctx.strokeStyle = selectedColor;\r\n    }\r\n\r\n    // changes to an eraser\r\n    useEraser = () => {\r\n        this.ctx.globalCompositeOperation = \"destination-out\";\r\n    }\r\n\r\n    // clears the canvas\r\n    clearCanvas = () => {\r\n        this.ctx.clearRect(0, 0, this.state.width, this.state.height);\r\n    };\r\n\r\n    // checks if the canvas is blank or not\r\n    // grab the URL of the image and save it to firebase\r\n    saveCanvas = () => {\r\n\r\n        const dataURL = this.canvas.current.toDataURL();\r\n\r\n        if (dataURL == this.blank) {\r\n            swal({\r\n                text: \"Please draw something!\",\r\n              });\r\n        } else {\r\n            const dbRef = firebase.database().ref();\r\n            dbRef.push(dataURL);\r\n            \r\n            // clear the canvas when user has submitted their drawing\r\n            this.clearCanvas();\r\n    \r\n            swal({\r\n                text: \"Your drawing has been saved! Go to the gallery to check it out!\",\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    // resizes the canvas when inner width of window changes\r\n    // help from https://www.hawatel.com/blog/handle-window-resize-in-react/\r\n    updateResize = () => {\r\n        if(window.innerWidth > 900) {\r\n            this.setState({ width: 800, height: 600 });\r\n        } else if (window.innerWidth <= 500 && window.innerWidth > 410) {\r\n            this.setState({ width: 380, height: 500 });\r\n        } else if (window.innerWidth <= 410 && window.innerWidth > 350) {\r\n            this.setState({ width: 300, height: 500 });\r\n        } else if (window.innerWidth <= 350) {\r\n            this.setState({ width: 280, height: 500 });\r\n        } else {\r\n            let updateWidth  = window.innerWidth-50;\r\n            let updateHeight = Math.round(updateWidth/1);\r\n            this.setState({ width: updateWidth, height: updateHeight });\r\n        }\r\n    };\r\n    \r\n\r\n    render () {\r\n        return (\r\n            <main className=\"wrapper\">\r\n                <section>\r\n                    <div className=\"canvas-header\">\r\n                        <h1>Pic-draw-sso</h1>\r\n                        <p className=\"p-styles\">Are you the next Picasso? Use the buttons to get started on your art piece! Remember to hit the save button and press gallery to view!</p>\r\n                    </div>\r\n                    <div className=\"canvas-button-container\">\r\n                        <Buttons\r\n                            colorFunction={this.changeColor}\r\n                            brushFunction={this.brushSize}\r\n                            eraserFunction={this.useEraser}\r\n                            clearFunction={this.clearCanvas}\r\n                            postFunction={this.saveCanvas}\r\n                        />\r\n                        <div className='canvas-container'>\r\n                            <canvas\r\n                                id='canvas-draw'\r\n                                className='canvas'\r\n                                ref={this.canvas}\r\n                                width={this.state.width}\r\n                                height={this.state.height}\r\n\r\n                                onMouseDown={this.startDrawing}\r\n                                onMouseUp={this.stopDrawing}\r\n                                onMouseOut={this.stopDrawing}\r\n                                onMouseMove={this.handleDraw}\r\n\r\n                                onTouchStart={this.startDrawing}\r\n                                onTouchMove={this.handleDraw}\r\n                                onTouchEnd={this.stopDrawing}>\r\n                            </canvas>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Canvas;","// Gallery.js\r\n\r\nimport React, { Component } from 'react';\r\nimport firebase from '../firebase.js';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Gallery extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      drawingsArray: [],\r\n      isLoading: true\r\n    }        \r\n  }\r\n\r\n  componentDidMount() {\r\n    const dbRef = firebase.database().ref();\r\n\r\n    // pulls drawings from firebase db and saves them in an array\r\n    dbRef.on('value', (response) => {\r\n      const dataFromDb = response.val();\r\n\r\n      const arrayFromDb = [];\r\n\r\n      // push each drawing into arrayFromDb array\r\n      for (let key in dataFromDb) {\r\n        arrayFromDb.push({\r\n            drawingUrl: dataFromDb[key],\r\n        })\r\n      }\r\n\r\n      this.setState ({\r\n        drawingsArray: arrayFromDb,\r\n        isLoading: false\r\n      })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"app-button\">\r\n          <Link to=\"/\">\r\n            <button className=\"button-style\">\r\n              back\r\n              <i class=\"fas fa-palette\"></i>\r\n            </button>\r\n          </Link>\r\n        </div>\r\n\r\n        <div className=\"wrapper\">\r\n          <h1>Gallery</h1>\r\n          <p className=\"p-styles\">Take a look at your drawing and other users' master pieces!</p>\r\n\r\n          {this.state.isLoading ?\r\n            <div className=\"gallery-loader\"></div>\r\n            :\r\n            <div className=\"gallery-grid\">\r\n              {this.state.drawingsArray.map((item) => {\r\n                return (\r\n                  <div className=\"user-drawing\">\r\n                    <img src={item.drawingUrl} alt=\"Canvas drawing by a user\"></img>\r\n                  </div>\r\n                )\r\n              })}\r\n            </div>\r\n          }\r\n      </div>\r\n      </div>             \r\n    );\r\n  }\r\n}\r\n\r\nexport default Gallery;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Canvas from './components/Canvas.js';\r\nimport Gallery from './components/Gallery.js';\r\nimport { \r\n  HashRouter as Router, \r\n  Route } from 'react-router-dom';\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div>\r\n          \r\n          <Route exact path=\"/\" component={Canvas}/>\r\n          <Route path=\"/gallery\" component={Gallery}/>\r\n\r\n          <footer>\r\n            <div className=\"wrapper\">\r\n              <p>Copyright © Anny Pham 2020 |\r\n                <a href=\"https://annyup.com\"><i class=\"fas fa-globe\"></i></a>\r\n                <a href=\"https://github.com/annyup/\"><i class=\"fab fa-github\"></i></a>\r\n                <a href=\"https://twitter.com/annyup_\"><i class=\"fab fa-twitter\"></i></a>\r\n                |\r\n                Design and code help from\r\n                <a href=\"https://annajliang.github.io/drawIt\"> Anna Liang</a>\r\n              </p>\r\n            </div>\r\n          </footer>\r\n\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}